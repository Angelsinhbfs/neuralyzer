// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Neuralyzer.Transport.FlatBuffers
{

using global::System;
using global::FlatBuffers;

public enum msgType : sbyte
{
 RoomStateUpdate = 0,
 SocketReady = 1,
 SocketRoomJoined = 2,
 RoomCreated = 3,
 RoomUserOnjoined = 4,
 RoomUserOnLeft = 5,
 SocketCreateOrJoinRoom = 6,
 SocketBlip = 7,
 SocketPulse = 8,
};

public enum msg : byte
{
 NONE = 0,
 StateUpdate = 1,
 StringData = 2,
 JoinCreateRequest = 3,
};

public struct StringData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static StringData GetRootAsStringData(ByteBuffer _bb) { return GetRootAsStringData(_bb, new StringData()); }
  public static StringData GetRootAsStringData(ByteBuffer _bb, StringData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public StringData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Data { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<StringData> CreateStringData(FlatBufferBuilder builder,
      StringOffset dataOffset = default(StringOffset)) {
    builder.StartObject(1);
    StringData.AddData(builder, dataOffset);
    return StringData.EndStringData(builder);
  }

  public static void StartStringData(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddData(FlatBufferBuilder builder, StringOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static Offset<StringData> EndStringData(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<StringData>(o);
  }
};

public struct TargetPlacement : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static TargetPlacement GetRootAsTargetPlacement(ByteBuffer _bb) { return GetRootAsTargetPlacement(_bb, new TargetPlacement()); }
  public static TargetPlacement GetRootAsTargetPlacement(ByteBuffer _bb, TargetPlacement obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public TargetPlacement __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public Vector3? Position { get { int o = __p.__offset(8); return o != 0 ? (Vector3?)(new Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartTargetPlacement(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<Vector3> positionOffset) { builder.AddStruct(2, positionOffset.Value, 0); }
  public static Offset<TargetPlacement> EndTargetPlacement(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<TargetPlacement>(o);
  }
};

public struct Annotation : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Annotation GetRootAsAnnotation(ByteBuffer _bb) { return GetRootAsAnnotation(_bb, new Annotation()); }
  public static Annotation GetRootAsAnnotation(ByteBuffer _bb, Annotation obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Annotation __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string UserId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetUserIdBytes() { return __p.__vector_as_arraysegment(4); }
  public string LineId { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetLineIdBytes() { return __p.__vector_as_arraysegment(6); }
  public Vector3? Positions(int j) { int o = __p.__offset(8); return o != 0 ? (Vector3?)(new Vector3()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int PositionsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Annotation> CreateAnnotation(FlatBufferBuilder builder,
      StringOffset userIdOffset = default(StringOffset),
      StringOffset lineIdOffset = default(StringOffset),
      VectorOffset positionsOffset = default(VectorOffset)) {
    builder.StartObject(3);
    Annotation.AddPositions(builder, positionsOffset);
    Annotation.AddLineId(builder, lineIdOffset);
    Annotation.AddUserId(builder, userIdOffset);
    return Annotation.EndAnnotation(builder);
  }

  public static void StartAnnotation(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddUserId(FlatBufferBuilder builder, StringOffset userIdOffset) { builder.AddOffset(0, userIdOffset.Value, 0); }
  public static void AddLineId(FlatBufferBuilder builder, StringOffset lineIdOffset) { builder.AddOffset(1, lineIdOffset.Value, 0); }
  public static void AddPositions(FlatBufferBuilder builder, VectorOffset positionsOffset) { builder.AddOffset(2, positionsOffset.Value, 0); }
  public static void StartPositionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static Offset<Annotation> EndAnnotation(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Annotation>(o);
  }
};

public struct Vector3 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Vector3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }

  public static Offset<Vector3> CreateVector3(FlatBufferBuilder builder, float X, float Y, float Z) {
    builder.Prep(4, 12);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<Vector3>(builder.Offset);
  }
};

public struct RoomObject : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static RoomObject GetRootAsRoomObject(ByteBuffer _bb) { return GetRootAsRoomObject(_bb, new RoomObject()); }
  public static RoomObject GetRootAsRoomObject(ByteBuffer _bb, RoomObject obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public RoomObject __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool Disposable { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }
  public string Owner { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetOwnerBytes() { return __p.__vector_as_arraysegment(8); }
  public Vector3? Position { get { int o = __p.__offset(10); return o != 0 ? (Vector3?)(new Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Vector3? LookDirection { get { int o = __p.__offset(12); return o != 0 ? (Vector3?)(new Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public string Prefab { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetPrefabBytes() { return __p.__vector_as_arraysegment(14); }
  public bool IsHidden { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string Name { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(18); }

  public static void StartRoomObject(FlatBufferBuilder builder) { builder.StartObject(8); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddDisposable(FlatBufferBuilder builder, bool disposable) { builder.AddBool(1, disposable, true); }
  public static void AddOwner(FlatBufferBuilder builder, StringOffset ownerOffset) { builder.AddOffset(2, ownerOffset.Value, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<Vector3> positionOffset) { builder.AddStruct(3, positionOffset.Value, 0); }
  public static void AddLookDirection(FlatBufferBuilder builder, Offset<Vector3> lookDirectionOffset) { builder.AddStruct(4, lookDirectionOffset.Value, 0); }
  public static void AddPrefab(FlatBufferBuilder builder, StringOffset prefabOffset) { builder.AddOffset(5, prefabOffset.Value, 0); }
  public static void AddIsHidden(FlatBufferBuilder builder, bool isHidden) { builder.AddBool(6, isHidden, false); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(7, nameOffset.Value, 0); }
  public static Offset<RoomObject> EndRoomObject(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<RoomObject>(o);
  }
};

public struct StateUpdate : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static StateUpdate GetRootAsStateUpdate(ByteBuffer _bb) { return GetRootAsStateUpdate(_bb, new StateUpdate()); }
  public static StateUpdate GetRootAsStateUpdate(ByteBuffer _bb, StateUpdate obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public StateUpdate __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string SiteDrive { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetSiteDriveBytes() { return __p.__vector_as_arraysegment(4); }
  public TargetPlacement? Poi { get { int o = __p.__offset(6); return o != 0 ? (TargetPlacement?)(new TargetPlacement()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Annotation? Annotations(int j) { int o = __p.__offset(8); return o != 0 ? (Annotation?)(new Annotation()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AnnotationsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public RoomObject? Create(int j) { int o = __p.__offset(10); return o != 0 ? (RoomObject?)(new RoomObject()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int CreateLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public RoomObject? Update(int j) { int o = __p.__offset(12); return o != 0 ? (RoomObject?)(new RoomObject()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int UpdateLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int Delete(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DeleteLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetDeleteBytes() { return __p.__vector_as_arraysegment(14); }

  public static Offset<StateUpdate> CreateStateUpdate(FlatBufferBuilder builder,
      StringOffset siteDriveOffset = default(StringOffset),
      Offset<TargetPlacement> poiOffset = default(Offset<TargetPlacement>),
      VectorOffset annotationsOffset = default(VectorOffset),
      VectorOffset createOffset = default(VectorOffset),
      VectorOffset updateOffset = default(VectorOffset),
      VectorOffset deleteOffset = default(VectorOffset)) {
    builder.StartObject(6);
    StateUpdate.AddDelete(builder, deleteOffset);
    StateUpdate.AddUpdate(builder, updateOffset);
    StateUpdate.AddCreate(builder, createOffset);
    StateUpdate.AddAnnotations(builder, annotationsOffset);
    StateUpdate.AddPoi(builder, poiOffset);
    StateUpdate.AddSiteDrive(builder, siteDriveOffset);
    return StateUpdate.EndStateUpdate(builder);
  }

  public static void StartStateUpdate(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddSiteDrive(FlatBufferBuilder builder, StringOffset siteDriveOffset) { builder.AddOffset(0, siteDriveOffset.Value, 0); }
  public static void AddPoi(FlatBufferBuilder builder, Offset<TargetPlacement> poiOffset) { builder.AddOffset(1, poiOffset.Value, 0); }
  public static void AddAnnotations(FlatBufferBuilder builder, VectorOffset annotationsOffset) { builder.AddOffset(2, annotationsOffset.Value, 0); }
  public static VectorOffset CreateAnnotationsVector(FlatBufferBuilder builder, Offset<Annotation>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartAnnotationsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCreate(FlatBufferBuilder builder, VectorOffset createOffset) { builder.AddOffset(3, createOffset.Value, 0); }
  public static VectorOffset CreateCreateVector(FlatBufferBuilder builder, Offset<RoomObject>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartCreateVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUpdate(FlatBufferBuilder builder, VectorOffset updateOffset) { builder.AddOffset(4, updateOffset.Value, 0); }
  public static VectorOffset CreateUpdateVector(FlatBufferBuilder builder, Offset<RoomObject>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartUpdateVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDelete(FlatBufferBuilder builder, VectorOffset deleteOffset) { builder.AddOffset(5, deleteOffset.Value, 0); }
  public static VectorOffset CreateDeleteVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartDeleteVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<StateUpdate> EndStateUpdate(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<StateUpdate>(o);
  }
};

public struct JoinCreateRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static JoinCreateRequest GetRootAsJoinCreateRequest(ByteBuffer _bb) { return GetRootAsJoinCreateRequest(_bb, new JoinCreateRequest()); }
  public static JoinCreateRequest GetRootAsJoinCreateRequest(ByteBuffer _bb, JoinCreateRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public JoinCreateRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Room { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetRoomBytes() { return __p.__vector_as_arraysegment(4); }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public string UserId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetUserIdBytes() { return __p.__vector_as_arraysegment(8); }
  public string DeviceType { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetDeviceTypeBytes() { return __p.__vector_as_arraysegment(10); }

  public static Offset<JoinCreateRequest> CreateJoinCreateRequest(FlatBufferBuilder builder,
      StringOffset roomOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset userIdOffset = default(StringOffset),
      StringOffset deviceTypeOffset = default(StringOffset)) {
    builder.StartObject(4);
    JoinCreateRequest.AddDeviceType(builder, deviceTypeOffset);
    JoinCreateRequest.AddUserId(builder, userIdOffset);
    JoinCreateRequest.AddName(builder, nameOffset);
    JoinCreateRequest.AddRoom(builder, roomOffset);
    return JoinCreateRequest.EndJoinCreateRequest(builder);
  }

  public static void StartJoinCreateRequest(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddRoom(FlatBufferBuilder builder, StringOffset roomOffset) { builder.AddOffset(0, roomOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddUserId(FlatBufferBuilder builder, StringOffset userIdOffset) { builder.AddOffset(2, userIdOffset.Value, 0); }
  public static void AddDeviceType(FlatBufferBuilder builder, StringOffset deviceTypeOffset) { builder.AddOffset(3, deviceTypeOffset.Value, 0); }
  public static Offset<JoinCreateRequest> EndJoinCreateRequest(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<JoinCreateRequest>(o);
  }
};

public struct ServerMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ServerMessage GetRootAsServerMessage(ByteBuffer _bb) { return GetRootAsServerMessage(_bb, new ServerMessage()); }
  public static ServerMessage GetRootAsServerMessage(ByteBuffer _bb, ServerMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ServerMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public msgType Type { get { int o = __p.__offset(4); return o != 0 ? (msgType)__p.bb.GetSbyte(o + __p.bb_pos) : msgType.RoomStateUpdate; } }
  public msg DataType { get { int o = __p.__offset(6); return o != 0 ? (msg)__p.bb.Get(o + __p.bb_pos) : msg.NONE; } }
  public TTable? Data<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static Offset<ServerMessage> CreateServerMessage(FlatBufferBuilder builder,
      msgType type = msgType.RoomStateUpdate,
      msg data_type = msg.NONE,
      int dataOffset = 0) {
    builder.StartObject(3);
    ServerMessage.AddData(builder, dataOffset);
    ServerMessage.AddDataType(builder, data_type);
    ServerMessage.AddType(builder, type);
    return ServerMessage.EndServerMessage(builder);
  }

  public static void StartServerMessage(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddType(FlatBufferBuilder builder, msgType type) { builder.AddSbyte(0, (sbyte)type, 0); }
  public static void AddDataType(FlatBufferBuilder builder, msg dataType) { builder.AddByte(1, (byte)dataType, 0); }
  public static void AddData(FlatBufferBuilder builder, int dataOffset) { builder.AddOffset(2, dataOffset, 0); }
  public static Offset<ServerMessage> EndServerMessage(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ServerMessage>(o);
  }
  public static void FinishServerMessageBuffer(FlatBufferBuilder builder, Offset<ServerMessage> offset) { builder.Finish(offset.Value); }
};


}
