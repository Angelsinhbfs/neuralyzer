// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var Neuralyzer = Neuralyzer || {};

/**
 * @const
 * @namespace
 */
Neuralyzer.Transport = Neuralyzer.Transport || {};

/**
 * @const
 * @namespace
 */
Neuralyzer.Transport.FlatBuffers = Neuralyzer.Transport.FlatBuffers || {};

/**
 * @constructor
 */
Neuralyzer.Transport.FlatBuffers.Vector3 = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Neuralyzer.Transport.FlatBuffers.Vector3}
 */
Neuralyzer.Transport.FlatBuffers.Vector3.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
Neuralyzer.Transport.FlatBuffers.Vector3.prototype.x = function() {
  return this.bb.readFloat32(this.bb_pos);
};

/**
 * @returns {number}
 */
Neuralyzer.Transport.FlatBuffers.Vector3.prototype.y = function() {
  return this.bb.readFloat32(this.bb_pos + 4);
};

/**
 * @returns {number}
 */
Neuralyzer.Transport.FlatBuffers.Vector3.prototype.z = function() {
  return this.bb.readFloat32(this.bb_pos + 8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @returns {flatbuffers.Offset}
 */
Neuralyzer.Transport.FlatBuffers.Vector3.createVector3 = function(builder, x, y, z) {
  builder.prep(4, 12);
  builder.writeFloat32(z);
  builder.writeFloat32(y);
  builder.writeFloat32(x);
  return builder.offset();
};

/**
 * @constructor
 */
Neuralyzer.Transport.FlatBuffers.Annotation = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Neuralyzer.Transport.FlatBuffers.Annotation}
 */
Neuralyzer.Transport.FlatBuffers.Annotation.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Neuralyzer.Transport.FlatBuffers.Annotation=} obj
 * @returns {Neuralyzer.Transport.FlatBuffers.Annotation}
 */
Neuralyzer.Transport.FlatBuffers.Annotation.getRootAsAnnotation = function(bb, obj) {
  return (obj || new Neuralyzer.Transport.FlatBuffers.Annotation).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
Neuralyzer.Transport.FlatBuffers.Annotation.prototype.userId = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
Neuralyzer.Transport.FlatBuffers.Annotation.prototype.lineId = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {number} index
 * @param {Neuralyzer.Transport.FlatBuffers.Vector3=} obj
 * @returns {Neuralyzer.Transport.FlatBuffers.Vector3}
 */
Neuralyzer.Transport.FlatBuffers.Annotation.prototype.positions = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new Neuralyzer.Transport.FlatBuffers.Vector3).__init(this.bb.__vector(this.bb_pos + offset) + index * 12, this.bb) : null;
};

/**
 * @returns {number}
 */
Neuralyzer.Transport.FlatBuffers.Annotation.prototype.positionsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
Neuralyzer.Transport.FlatBuffers.Annotation.startAnnotation = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} userIdOffset
 */
Neuralyzer.Transport.FlatBuffers.Annotation.addUserId = function(builder, userIdOffset) {
  builder.addFieldOffset(0, userIdOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} lineIdOffset
 */
Neuralyzer.Transport.FlatBuffers.Annotation.addLineId = function(builder, lineIdOffset) {
  builder.addFieldOffset(1, lineIdOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} positionsOffset
 */
Neuralyzer.Transport.FlatBuffers.Annotation.addPositions = function(builder, positionsOffset) {
  builder.addFieldOffset(2, positionsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
Neuralyzer.Transport.FlatBuffers.Annotation.startPositionsVector = function(builder, numElems) {
  builder.startVector(12, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
Neuralyzer.Transport.FlatBuffers.Annotation.endAnnotation = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
Neuralyzer.Transport.FlatBuffers.Annotation.finishAnnotationBuffer = function(builder, offset) {
  builder.finish(offset);
};

// Exports for Node.js and RequireJS
this.Neuralyzer = Neuralyzer;
